Classfile /Users/wanghengfang/Desktop/Hello.class
  Last modified 2020-10-19; size 606 bytes
  MD5 checksum a6ff188b1acce8211b342e67433e9a92
  Compiled from "Hello.java"
public class Hello
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #8.#19         // java/lang/Object."<init>":()V
   #2 = Class              #20            // Hello
   #3 = Methodref          #2.#19         // Hello."<init>":()V
   #4 = Methodref          #2.#21         // Hello.test:()V
   #5 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;
   #6 = String             #24            // hello
   #7 = Methodref          #25.#26        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #8 = Class              #27            // java/lang/Object
   #9 = Utf8               <init>
  #10 = Utf8               ()V
  #11 = Utf8               Code
  #12 = Utf8               LineNumberTable
  #13 = Utf8               main
  #14 = Utf8               ([Ljava/lang/String;)V
  #15 = Utf8               test
  #16 = Utf8               StackMapTable
  #17 = Utf8               SourceFile
  #18 = Utf8               Hello.java
  #19 = NameAndType        #9:#10         // "<init>":()V
  #20 = Utf8               Hello
  #21 = NameAndType        #15:#10        // test:()V
  #22 = Class              #28            // java/lang/System
  #23 = NameAndType        #29:#30        // out:Ljava/io/PrintStream;
  #24 = Utf8               hello
  #25 = Class              #31            // java/io/PrintStream
  #26 = NameAndType        #32:#33        // println:(Ljava/lang/String;)V
  #27 = Utf8               java/lang/Object
  #28 = Utf8               java/lang/System
  #29 = Utf8               out
  #30 = Utf8               Ljava/io/PrintStream;
  #31 = Utf8               java/io/PrintStream
  #32 = Utf8               println
  #33 = Utf8               (Ljava/lang/String;)V
{
  public Hello();                             // 构造方法
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 2: 0

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: new           #2                  // class Hello , new一个常量池#2的Object对象放入栈顶
         3: dup                               // 将栈顶对象复制一份出来重新入栈，这样栈里面就有两个一模一样的元素
         4: invokespecial #3                  // Method "<init>":()V， 执行对象 <init> 方法
         7: astore_1                          // 将引用变量存储第一局部变量槽位
         8: aload_1                           // 将第一局部变量槽位值取出入栈
         9: invokevirtual #4                  // Method test:()V，执行对象 test 方法
        12: return
      LineNumberTable:
        line 4: 0
        line 5: 8
        line 6: 12

  public void test();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=1           // 需要栈深度为2，本地变量4个; 分别是 this,a,b,i，这里要注意如果变量是2类即double,long,则一个变量占2位，具体分类见图var.png; 参数数量一个 this
         0: iconst_0                           // 常量0进栈
         1: istore_1                           // 栈顶元素(0)值存入第一局部变量
         2: iconst_0                           // 常量0进栈
         3: istore_2                           // 栈顶元素值(0)存入第二局部变量
         4: iconst_0                           // 常量0进栈
         5: istore_3                           // 栈顶元素值(0)存入第三局部变量
         6: iload_3                            // 第三int型局部变量进栈
         7: bipush        6                    // byte型常量6进栈
         9: if_icmpge     50                   // 两个栈中元素比较，即i比较6，如果满足大于等于，则进入50行执行
        12: iinc          2, 1                 // 二号局部变量（b）增加1
        15: iload_1                            // 加载一号局部变量(a) 入栈
        16: iconst_1                           // 常量1进栈
        17: iadd                               // int加法
        18: istore_1                           // 存入第一局部变量（a)
        19: iload_1                            // 加载一号局部变量(a) 入栈
        20: iconst_2                           // 常量2进栈
        21: isub                               // int减法
        22: istore_1                           // 存入第一局部变量（a)
        23: iload_1                            // 加载一号局部变量(a) 入栈
        24: iconst_3                           // 常量3进栈
        25: imul                               // int乘法
        26: istore_1                           // 存入第一局部变量（a)
        27: iload_1                            // 加载一号局部变量(a) 入栈
        28: iconst_4                           // 常量4进栈
        29: idiv                               // int除法
        30: istore_1                           // 存入第一局部变量（a)
        31: iload_3                            // 加载三号局部变量(i) 入栈
        32: iconst_5                           // 常量5进栈
        33: if_icmpne     44                   // 两个栈中元素比较，即i比较5，如果满足等于，则进入44行执行
        36: getstatic     #5                   // Field java/lang/System.out:Ljava/io/PrintStream;
        39: ldc           #6                   // String hello
        41: invokevirtual #7                   // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        44: iinc          3, 1                 // 三号号局部变量（i）增加1
        47: goto          6                    // 回到第6行执行
        50: return
      LineNumberTable:                         // 行号和代码行数对应表
        line 9: 0
        line 10: 2
        line 11: 4
        line 12: 12
        line 13: 15
        line 14: 19
        line 15: 23
        line 16: 27
        line 17: 31
        line 18: 36
        line 11: 44
        line 21: 50
      StackMapTable: number_of_entries = 3
        frame_type = 254 /* append */
          offset_delta = 6
          locals = [ int, int, int ]
        frame_type = 37 /* same */
        frame_type = 250 /* chop */
          offset_delta = 5
}
SourceFile: "Hello.java"